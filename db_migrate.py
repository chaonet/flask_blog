# -*- coding:utf-8 -*-
import imp # 提供了一个实现 import 语句机制的接口
from migrate.versioning import api # 执行 migrate 命令
from app import db  # <SQLAlchemy engine='sqlite:////Users/chao/Desktop/projects/flask/flask_blog/app.db'>
from config import SQLALCHEMY_DATABASE_URI
from config import SQLALCHEMY_MIGRATE_REPO

migration = SQLALCHEMY_MIGRATE_REPO + '/versions/%03d_migration.py' % (api.db_version(SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO) + 1) # 生成新版本的策略文件名称
# print migration
# /Users/chao/Desktop/projects/flask/flask_blog/db_repository/ versions/001_migration.py ，三位数字，不足三位的左边用 0 补全(默认空格)
tmp_module = imp.new_module('old_model') # 创建一个名为 'old_model' 的新空模块对象，这个对象不会插入 'sys.modules'。赋给变量名`tmp_module`
# print tmp_module
# <module 'old_model' (built-in)>
old_model = api.create_model(SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO) # 转储 数据库，作为一个 Python 模型 输出
# print api.create_model(SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO)
# '\n## File autogenerated by genmodel.py\n\nfrom sqlalchemy import *\n\n\nmeta = MetaData()\n'

'''
>>> print old_model

## File autogenerated by genmodel.py

from sqlalchemy import *


meta = MetaData()

'''

exec old_model in tmp_module.__dict__

script = api.make_update_script_for_model(SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO, tmp_module.meta, db.metadata) # 创建一个脚本，更改老的 Python模型到新的(当前的)，发送到 stdout
# tmp_module.meta: MetaData(bind=None), db.metadata : MetaData(bind=None)

'''
>>> print script
from sqlalchemy import *
from migrate import *


from migrate.changeset import schema
pre_meta = MetaData()
post_meta = MetaData()
user = Table('user', post_meta,
    Column('id', Integer, primary_key=True, nullable=False),
    Column('nickname', String(length=64)),
    Column('email', String(length=120)),
)


def upgrade(migrate_engine):
    # Upgrade operations go here. Don't create your own engine; bind
    # migrate_engine to your metadata
    pre_meta.bind = migrate_engine
    post_meta.bind = migrate_engine
    post_meta.tables['user'].create()


def downgrade(migrate_engine):
    # Operations to reverse the above upgrade go here.
    pre_meta.bind = migrate_engine
    post_meta.bind = migrate_engine
    post_meta.tables['user'].drop()

'''

open(migration, 'wt').write(script) # 以文本模式打开'/Users/chao/Desktop/projects/flask/flask_blog/db_repository/ versions/001_migration.py'，将'script'写入

api.upgrade(SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO) # 升级数据库到最后的版本，这会运行 更改脚本 中的 upgrade() 函数
print 'New migration saved as ' + migration
print 'Current database version: ' + str(api.db_version(SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO))